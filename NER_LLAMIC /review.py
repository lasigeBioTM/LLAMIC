import argparse
import re
import json
import pandas as pd
import numpy as np
from promptTemplate import review_disease_icd_pair_prompt

class NpEncoder(json.JSONEncoder):
    """
    Custom JSON encoder.
    """
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        if isinstance(obj, np.floating):
            return float(obj)
        if isinstance(obj, np.ndarray):
            return obj.tolist()
        return super(NpEncoder, self).default(obj)
    
class Lexicon:
    """
    Extract and maps ICD-10 codes to their corresponding descriptions.
    """
    def __init__(self, data_path):
        self.data = pd.read_csv(data_path, compression='gzip')
        self.lexicon = self.create_lexicon()

    def create_lexicon(self):
        # Filter the data to only include ICD-10 codes with 3 digits
        filtered_data = self.data.loc[
            (self.data['icd_version'] == 10) & (self.data['icd_code'].astype(str).str.len() == 3),
            ['icd_code', 'long_title']
        ]
        return dict(zip(filtered_data['icd_code'], filtered_data['long_title']))

    def get_description(self, icd_code):
        # Return the description of the ICD-10 code
        return self.lexicon.get(str(icd_code), "Unknown")

class ReviewGenerator(object):
    """
    Generates a review of a disease-ICD pair.
    """
    def __init__(self,llm, args, model_name, device):
        self.llm = llm
        self.args = args
        self.model_name = model_name
        self.device = device

    def review_disease(self, note, entity, description):
        try:
            # Generate the review prompt
            review_prompt = review_disease_icd_pair_prompt.replace("{text}", note)
            review_prompt = review_prompt.replace("{entity}", entity)
            review_prompt = review_prompt.replace("{description}", description)

            generated_text = self.llm.generate(review_prompt, 100)
            pattern = r"\{(.*?)\}"
            matches = re.findall(pattern, generated_text.replace("\n", ""))

            # Extract the response JSON
            if not matches:
                return "", "JSON pattern not found"
            json_str = "{" + matches[0] + "}"
            try:
                result_dict = json.loads(json_str)
            except json.JSONDecodeError:
                return "", "Invalid JSON"
            if "Result" not in result_dict or not isinstance(result_dict["Result"], int):
                return "", "Invalid Result format in JSON"

            return result_dict["Result"], ""

        except Exception as e:
            return "", f"Unexpected error: {str(e)}"

class Review(object):
    """
    Review the disease-ICD pairs generated by the model.
    """
    def __init__(self, llm, args) -> None:
        super().__init__()
        self.class_name = 'Review_Disease_ICD_Pair'
        self.class_desc = 'Review if a given entity is a disease and correctly matches a category.'
        self.llm = llm
        self.args = args
        self.diseaseReview = ReviewGenerator(
            llm=self.llm, args=args, model_name=args.llm_name, device='auto'
        )

    def call(self, query, pairs):
        lexicon = Lexicon('data/d_icd_diagnoses.csv.gz')
        pairs = re.findall(r"\('([^']+)', '([^']+)'\)", pairs)
        entities = [pair[0] for pair in pairs] if pairs else []
        icds = [pair[1] for pair in pairs] if pairs else []
        descriptions = [lexicon.get_description(pair[1]) for pair in pairs] if pairs else []

        results = []
        errors = []
        for entity, description, icd in zip(entities, descriptions, icds):
            if description != "Unknown":
                result, error = self.diseaseReview.review_disease(query, entity, description)
                result_entry = {
                    "entity": str(entity) if entity else None,
                    "icd": str(icd) if icd else None,
                    "result": int(result) if isinstance(result, (int, np.integer)) else 0,
                }
            else:
                result_entry = {
                    "entity": str(entity) if entity else None,
                    "icd": str(icd) if icd else None,
                    "result": 0,
                }
                error = ""
            results.append(result_entry)
            errors.append(error)            

        if results:
            return json.dumps({"results": results}, cls=NpEncoder, indent=4), errors
        else:
            return json.dumps({"results": []}, indent=4), "No results"
